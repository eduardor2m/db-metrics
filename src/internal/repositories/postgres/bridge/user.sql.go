// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package bridge

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO "user" ("id", "name", "email", "preferences") VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID          uuid.UUID
	Name        string
	Email       string
	Preferences string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Preferences,
	)
	return err
}

const listUsers = `-- name: ListUsers :many

SELECT id, name, email, preferences FROM "user"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Preferences,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
