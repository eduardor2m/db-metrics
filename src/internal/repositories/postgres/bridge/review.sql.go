// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: review.sql

package bridge

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :exec

INSERT INTO review (id, user_id, book_id, rating, comment) VALUES ($1, $2, $3, $4, $5)
`

type CreateReviewParams struct {
	ID      uuid.UUID
	UserID  uuid.NullUUID
	BookID  uuid.NullUUID
	Rating  float64
	Comment sql.NullString
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReview,
		arg.ID,
		arg.UserID,
		arg.BookID,
		arg.Rating,
		arg.Comment,
	)
	return err
}

const listReviews = `-- name: ListReviews :many

SELECT id, user_id, book_id, rating, comment FROM review
`

func (q *Queries) ListReviews(ctx context.Context) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.Rating,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
