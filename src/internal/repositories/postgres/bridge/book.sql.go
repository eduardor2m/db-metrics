// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: book.sql

package bridge

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :exec

INSERT INTO book (id, title, author, genre, synopsis) VALUES ($1, $2, $3, $4, $5)
`

type CreateBookParams struct {
	ID       uuid.UUID
	Title    string
	Author   string
	Genre    string
	Synopsis sql.NullString
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) error {
	_, err := q.db.ExecContext(ctx, createBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Synopsis,
	)
	return err
}

const listBooks = `-- name: ListBooks :many

SELECT id, title, author, genre, synopsis FROM book
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.Synopsis,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
